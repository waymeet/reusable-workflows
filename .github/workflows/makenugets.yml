name: Generate NuGet and push to Github

on:
  workflow_call:
    inputs:
      DOTNET_PROJECT:
        required: true
        type: string
      DOTNET_CSPROJ: 
        type: string
        required: true
      RESTORE_SOURCES:
        type: string
        required: true
      CONFIGURATION:
        required: true
        type: string
      FRAMEWORK: 
        type: string
        required: true
      RUNTIME:
        required: true
        type: string
      ADDITIONAL_PROPERTIES: 
        type: string
        required: false
    secrets:
      GPACKAGES_TOKEN:
        required: true

jobs:
  generate-nuget-and-push:
    runs-on: self-hosted
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          #submodules: false
          #lfs: true
          clean: true
          fetch-depth: 0 # Required, without this get_previous_tag action won't be able to find any or the correct tags

      - name: Check initial folder
        run: |
          echo "Checked out code"
          ls -la
          
      - name: Output debug information
        id: path_definition
        run: |
          echo $PWD
          echo ${GITHUB_WORKSPACE}/src
          
      - name: Extract Git Branch information
        id: branch_name
        run: |
          MBRANCH=${GITHUB_REF#refs/*/}
          GITSHA=${GITHUB_SHA::8}
          if [[ $MBRANCH == feature/* ]]; then
            BRANCH="a-${MBRANCH#feature/}.$(date +%Y%m%d%H%M)"
          elif [[ $MBRANCH == "master" ]] || [[ $MBRANCH == "main" ]]; then
            BRANCH="" ;
          else
            BRANCH="${MBRANCH}.$(date +%Y%m%d%H%M)"
          fi
          echo BRANCH: $BRANCH
          echo ::set-output name=BRANCH::$BRANCH

      - name: Get Previous Tag
        id: get_previous_tag
        #uses: WyriHaximus/github-action-get-previous-tag@v1
        run: |
          VERSIONPROPS=$(cat Directory.Build.props | grep "<VersionPrefix>" | cut -d ">" -f2 | cut -d "<" -f1)
          echo ::set-output name=tag::$VERSIONPROPS
        
      - name: Set VERSION variable from Directory.Build.props
        id: version_num
        run: |
          echo VERSION: ${{ steps.get_previous_tag.outputs.tag }}
          echo ::set-output name=VERSION::${{ steps.get_previous_tag.outputs.tag }}

      - name: Check if package exists
        run: |
          if [ $(curl --silent \
           -H "Accept: application/vnd.github.v3+json" -u hgrbot:${{ secrets.GPACKAGES_TOKEN }} \
           https://api.github.com/orgs/HustleGotReal/packages/nuget/${{ inputs.DOTNET_PROJECT }}/versions | grep '"${{ steps.version_num.outputs.VERSION }}"' > /dev/null) \
          -eq 0 ]; then
           [[ -n "${{ steps.branch_name.outputs.BRANCH }}" ]] || (echo "This version of the package already exists in this branch" ; exit 1) 
          else
           echo "This package doesn't exists yet"
          fi
         
      #- name: Setup NuGet
      #  uses: NuGet/setup-nuget@v1.0.5

      #- name: Setup .NET
      #  uses: actions/setup-dotnet@v1
      #  with:
      #    dotnet-version: 6.0.x
          
      - name: Ensure addition of nugets source (Github Packages)
        continue-on-error: true
        run: dotnet nuget add source --username hgrbot --password ${{ secrets.GPACKAGES_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/HustleGotReal/index.json"
       
      - name: Restore
        run: |
             dotnet restore /property:Configuration=${{ inputs.CONFIGURATION }} /property:TargetFramework=${{ inputs.FRAMEWORK }} --runtime ${{ inputs.RUNTIME }} \
             ${{ inputs.DOTNET_CSPROJ }} --source https://nuget.pkg.github.com/HustleGotReal/index.json ${{ inputs.RESTORE_SOURCES }}
        
      - name: Build
        run: |
             dotnet build -f ${{ inputs.FRAMEWORK }} -r ${{ inputs.RUNTIME }} ${{ inputs.DOTNET_CSPROJ }} /property:Configuration=${{ inputs.CONFIGURATION }} ${{ inputs.ADDITIONAL_PROPERTIES }} /p:GenerateAssemblyInfo=true /p:DebugSymbols=true /p:DebugType=portable /p:SymbolPackageFormat=snupkg \
             /p:VersionPrefix=${{ steps.version_num.outputs.VERSION }} /p:VersionSuffix=${{ steps.branch_name.outputs.BRANCH }}

      - name: Pack
        run: dotnet pack ${{ inputs.DOTNET_CSPROJ }} -c ${{ inputs.CONFIGURATION }} /p:VersionPrefix=${{ steps.version_num.outputs.VERSION }} /p:VersionSuffix=${{ steps.branch_name.outputs.BRANCH }} /p:GenerateAssemblyInfo=true /p:DebugSymbols=true /p:DebugType=portable /p:SymbolPackageFormat=snupkg --output nupkg-tmp/

      - name: Ensure gpr tool installation for upload NuGets
        run: |
             if [[ -f  /root/.dotnet/tools/gpr ]]; then
               echo "Is already installed"
             else
               dotnet tool install gpr -g
             fi

      - name: Push
        run: /root/.dotnet/tools/gpr push nupkg-tmp/${{ inputs.DOTNET_PROJECT }}.${{ steps.version_num.outputs.VERSION }}*${{ steps.branch_name.outputs.BRANCH }}.nupkg --repository https://github.com/HustleGotReal/nugets -k ${GPACKAGESTOKEN}
        env:
          GPACKAGESTOKEN: ${{ secrets.GPACKAGES_TOKEN }}
      
      - name: Delete old nugets versions
        continue-on-error: true
        if: ${{ steps.branch_name.outputs.BRANCH }} == ""
        uses: actions/delete-package-versions@v2
        with: 
          package-name: ${{ inputs.DOTNET_PROJECT }}
          repo: 'nugets'
          token: ${{ secrets.GPACKAGES_TOKEN }}
          min-versions-to-keep: 20
          delete-only-pre-release-versions: "false"

